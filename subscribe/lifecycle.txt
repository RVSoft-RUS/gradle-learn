Шаг 1. Считываются все скрипты (с расшипением .gradle) из папки init.d. Для каждого скрипта создается
    объект org.gradle.api.Script. Все они нужны для инициализации объекта org.gradle.api.invocation.Gradle,
    который представляет проект (Хранит ацикличный граф).
Шаг 2. Считывается файл settings.gradle (org.gradle.api.Script), чтобы проинициализировать многомодульный проект.
    Для одномодульного не нужен.
Шаг 3. Считывается build.gradle -> Script -> org.gradle.api.Project (Описывает build.gradle файл)
Шаг 4. Из Project выполняются все org.gradle.api.Task

1,2 - Фаза инициализации, после него известна вся структура проекта
3 - Фаза конфигурации
4 - Execution phase - Пробегаемся по всему ацикличному дереву (в объекте Gradle) и выполняем задачи.

settings.gradle ====================================================================================
//println("init phase, settings file: ${tasks.toString()}") недоступно на данном этапе
//Все это передастся как одна функция, делегирует все вызовы объекту типа Settings
println("init phase, settings file: ${toString()}")
println("init phase, gradle hash: ${gradle.hashCode()}")
println("init phase, settings dir: ${settings.settingsDir}")

build.gradle =======================================================================================
println "configuration phase"
println "gradle id: ${gradle.hashCode()}"
println "root: ${rootProject.hashCode()}, ${project.hashCode()}, ${gradle.rootProject.hashCode()}"
//Так как проект одномодульный то все они равны


//Project -> [Task1, Task2]
//Task -> [Action1, Action2] -> action.execute (execution phase)
