/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.7/samples
 */
import java.time.LocalDate

ext { //свойства - обычная map
    javaVersion = 16
    currentDate = LocalDate.now()
}

repositories {
//    ~/.gradle/caches --offline
//    ~/.m2/repository
//    mavenLocal()
    maven {
        name "nexus dmdev"
        uri "https://nexus.dmdev/repository"
    }
    mavenCentral()
//    flatDir {}
}

dependencies { //все три строки - одно и тоже (синт. сахар)
//    add('implementation', [group: "org.springframework", name: 'spring-webmvc', version: '5.3.9'])
//    add('implementation', "org.springframework:spring-webmvc:5.3.9")
    implementation "org.springframework:spring-webmvc:5.3.9"
}

println ext.javaVersion
println project.ext.javaVersion
println javaVersion
println project.javaVersion
//println project."projectParam1"
println "---- All properties:"
println project.properties
println "---- System: "
println System.getProperty("sys.example")

//Так же d gradle.properties

// task = new DefaultTask Вызов: gradle hello
//4 - передаем мапу
def map = [description: "Hello task", group: "dmdev"]
//task(map, "hello") {
//    println "configuration phase. Task hello"
//    println "task: $description, group: $group, actions: ${actions.size()}"
//}

//3 - синтаксический сахар
task hello(description: "Hello task", group: "dmdev", type: DefaultTask) {
    println "configuration phase. Task hello"
    println "task: $description, group: $group, actions: ${actions.size()}" 
    //все действия тут выполняются на стадии configuration

    doLast {
        println "execution phase, Action 1"
        //все действия тут выполняются на стадии execution
    }
    doFirst {
        println "execution phase, Action 2"
    }
    doLast {
        println "execution phase, Action 3"
    }
    println "task: $description, group: $group, actions: ${actions.size()}"
    println "path task: $path"
}

//tasks.findByName("hello").
//1
//hello.description = "Hello task"
//hello.group = "dmdev"

//2
//hello.configure Closure
//hello {
//    println "configuration phase. Task hello"
//    description = "Hello task"
//    group = "dmdev"
//}

task first {
    doLast {
        println "Task 1"
    }
}

task second {
    doLast {
        println "Task 2"
    }
}

task third {
    doLast {
        println "Task 3"
    }
}

task fourth {
    doLast {
        println "Task 4"
    }
}

// 2 <--- 4

//fourth.dependsOn second
//second.dependsOn first
//second.finalizedBy third - после нее должна запуститься 3я
fourth.dependsOn first
fourth.dependsOn second
fourth.dependsOn third

first.mustRunAfter second // 1 после 2 должна идти (Это не зависимость, просто порядок)
//second.shouldRunAfter first

//Сюда попадут каждый раз разные задачи, в зависимости от запущенной (+ все от которых она зависит)
gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
    println "---- Graph:"
    graph.allTasks.each {
        println "${it.name}"
    }
}
//whenReady - callback - выполнится, когда станет возможно


gradle.taskGraph.beforeTask { Task task -> // перед каждой задачей, условие
    if (task.group == 'other') {
        println "beforeTask callBack $task"
    }
}
gradle.taskGraph.beforeTask { Task task -> // после каждой задачи
        println "beforeTask callBack $task"
}

gradle.taskGraph.afterTask { Task task ->
    if (task.name == 'first') {
        println "afterTask callBack $task"
    }
}

defaultTasks 'second' // если запустить gradle без параметров (по умолчанию help, теперь second)

task.isEnabled // вручную уст условие, доступна ли
//task.onlyIf(Closure ..) динамическое условие, доступна ли

//============================================================================
apply from: 'script.gradle' //Из файла. Если лежит в корне рядом, то путь не нужен
apply plugin: CustomPlugin //Из класса

class CustomPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        addHelloTask(project)
    }

    void addHelloTask(Project project) {
        def map = [description: "Hello task", group: "dmdev", type: DefaultTask]
        project.task(map, "hello") {
            println "configuration phase. Task hello"

            doLast {
                println "execution phase, Action 1"
            }
            doFirst {
                println "execution phase, Action 2"
            }
            doLast {
                println "execution phase, Action 3"
            }
            println "task: $description, group: $group, actions: ${actions.size()}"
            println "path task: $path"
        }
    }
}
